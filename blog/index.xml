<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on dtouch3d&#39;s bl0g</title>
    <link>https://dtouch3d.github.io/blog/</link>
    <description>Recent content in Blog on dtouch3d&#39;s bl0g</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 29 Aug 2017 23:41:35 +0300</lastBuildDate>
    
	<atom:link href="https://dtouch3d.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Paper Notes: Bootstomp: on the Security of Bootloaders in Mobile Devices</title>
      <link>https://dtouch3d.github.io/blog/paper-notes-bootstomp-on-the-security-of-bootloaders-in-mobile-devices/</link>
      <pubDate>Tue, 29 Aug 2017 23:41:35 +0300</pubDate>
      
      <guid>https://dtouch3d.github.io/blog/paper-notes-bootstomp-on-the-security-of-bootloaders-in-mobile-devices/</guid>
      <description>Title: Bootstomp: on the Security of Bootloaders in Mobile Devices [PDF]
BootStomp is a tool that searches for vulnerabilities in bootloaders of mobile devices. There are two types of vulnerabilities covered. The first is code execution in the bootloader via a memory corruption bug. The second is unlocking the bootloader without the consent of the user which enables code execution with higher permissions and possibly persistence.
BootStomp uses dynamic symbolic execution to perform taint analysis on bootloader code typically runnning on ARM&amp;rsquo;s exception level 1 (EL1).</description>
    </item>
    
    <item>
      <title>Paper Notes: Non-Semantics-Preserving Transformations For Higher-Coverage Test Generation Using Symbolic Execution</title>
      <link>https://dtouch3d.github.io/blog/paper-notes-non-semantics-preserving-transformations-for-higher-coverage-test-generation-using-symbolic-execution/</link>
      <pubDate>Sat, 19 Aug 2017 18:55:38 +0300</pubDate>
      
      <guid>https://dtouch3d.github.io/blog/paper-notes-non-semantics-preserving-transformations-for-higher-coverage-test-generation-using-symbolic-execution/</guid>
      <description>Title: Non-Semantics-Preserving Transformations For Higher-Coverage Test Generation Using Symbolic Execution [PDF]
In this paper a number of non-semantics-preserving transformations are proposed in order to increase code coverage on symbolic execution. These transformations produce a simpler program by removing basic blocks based on metrics like path length, hence the non-semantics-preserving part.
The most performant transformation appears to be the one that causes all loops to return after a single iteration, which of course greatly reduces the state space and allows symbolic execution to reach deeper paths.</description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://dtouch3d.github.io/blog/first-post/</link>
      <pubDate>Thu, 17 Aug 2017 23:52:08 +0300</pubDate>
      
      <guid>https://dtouch3d.github.io/blog/first-post/</guid>
      <description>This is a drill, please do not be alarmed.</description>
    </item>
    
  </channel>
</rss>